chatgpt: how can I download the citations for academic papers in climate science as a set of network nodes and arks, that later be displayed as a network?
Starting from the python file openalex_citation_network.py, which builds an openalex citation network for climate science, create one or more new python files that use openalex topics instead of openalex concepts.  Structure the new files as  appropriate python objects.  
Please create a test file, test_openalex.py, modeled on test_openalex_network.py, with a single test, test_get_topic, modeled on the same named method in test_openalex_network.py.  For the new test, use monkeypatching for the OpenAlexClient._get method.  The monkeypatched method should return the contents of file sample_topic.json
Please add a method get_work to openalex.py, which retrieves an openalex Work, similar to the way get_topic retrieves an openalex Topic.  Add a test for get_work to test_openalex_network.py
Please create write_list as a method in class NetworkFileTalker in file network_file_talker.py. Given a list of objects, write_list writes each object in json format as one line to the file. Arguments to write_list: "object_list" is the list of objects; "filename" is the name of the file as a string. If the file exists, append the new lines to it. If the file does not exist, create it first and then write the lines. Create class TestNetworkFileTalker in file test_network_file_talker.py, with a test for write_file that reads the lines from sample_works_list.json as a list of json objects called input-list, uses write_file to write the objects to file “test-file”, then reads “test-file” to create a new list of objects called output-list. Assert that the lengths of input-list and output-list are the same, and that the id and display_name fields of the first object in each list are the same.
refactor the read file logic in test_write_file in TestNetworkFileTalker as method read_file in NetworkFileTalker.  Given an input file name, read_file reads the input file and returns a list of objects.  Assume that the file consists of one or more json objects, which may be on a single line or may be divided across multiple lines.   If the format of the line is not valid json, ignore it.  If the file is empty or contains no valid json objects, return an empty list.  Refactor test_write_file to use read_file, both to read sample_works_list.json to create the input-list, and then to read test-file to create the output-list.    
Update the test test_get_work with the following assertions about Work.referenced_works: length of the list is 65; first item in the list is "https://openalex.org/W1529443799"; last item in the list is "https://openalex.org/W4256135186". 
Please create a data class ReferenceEdge in openalex.py, with two string fields, from_work and referenced_work. Then create a method build_reference_edges in openalex.py, which takes a Work and builds a list of ReferenceEdge, one ReferenceEdge for each item in Work.referenced_works, where the ReferenceEdge from_work is Work.id from the given Work, and the ReferenceEdge referenced_work is the corresponding item in Work.referenced_works from the given Work. Create an appropriate test for building the list of ReferenceEdge, using the data in sample_work_json
Please create method write_reference_edges in openalex.py, which writes a list of ReferenceEdges to a file in CSV format. Arguments: "referenceEdges", a list of type ReferenceEdge; "filename", a string that is the name of the file to write to. If the file exists, append the new CSV lines to it. If the file does not exist, create it first and then write the lines. The first field in each CSV entry is a string: ReferenceEdge.from_work.  The second field is a string: ReferenceEdge.referenced_work. Create test_write_reference_edges in test_openalex.py to test the write_reference_edges method.  Use the data from test_build_reference_edges, first to build a list of ReferenceEdge, and then write_reference_edges    to create a CSV file.  Read the CSV file to determine the number of CSV lines, and verify that the data from the first line matches the data from the first ReferenceEdge in the list, and that the data from the last line matches the data from the last ReferenceEdge in the list. 
Please refactor these lines in openalex.py as method build_works_and_network_for_page
            for i in items:
                w = self.build_work(i)
                results_list.append(w)
                collected += 1
                if max_items and collected >= max_items:
                    return results_list
move methods build_reference_edges and write_reference_edges from openalex.py to network_file_talker.py, and update the corresponding tests.  
Refactor these lines in openalex.py as method write_work_nodes_edges
        self.talker.write_list(page_work_list, self.work_node_file)
        for w in page_work_list:
            edges: List[ReferenceEdge] = self.talker.build_reference_edges(w)
        self.talker.write_reference_edges(edges, self.reference_edge_file)
Please move write_work_nodes_edges from OpenAlexClient to NetworkFileTalker
In test_network_file_talker, add a test for the write_work_nodes_edges method from NetworkFileTalker.  Model the test on test_write_file, using sample_works_list.json to create input_list List[Work], prior to calling write_work_nodes_edges(input_list)
print the contents of test_file
Create the following assertions:
test_file has five records
read test_file as output_list List[Work], and verify that output_list[0] id and display_names are the same as for input_list[0]
expect the number of records reference_edges.csv to be 249.
expect the first record in reference_edges.csv to be 
"https://openalex.org/W4249751050,https://openalex.org/W1529443799"
expect the last record in reference_edges.csv to be 
"https://openalex.org/W2272473773,https://openalex.org/W118046694"

Please add an optional string argument to read_file in NetworkFileTalker: "key".  Key is a json key at the highest level of the object.  Parse the value for "key" as a JSON object, and return the results.  On line 18 of test_write_file, pass in the key "results" to read_file 

Please create test_build_works_and_network_for_page in test_openalex.py 
https://citationgraph.org/graph/f8d4a103bf5fc90f